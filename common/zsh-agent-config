#!/bin/zsh
# ZSH Configuration for AI Agent Mode (Cursor, GitHub Copilot, etc.)
# Optimized for compatibility and minimal interference with AI tools

ZSH=$DOTFILES/zsh/oh-my-zsh

# Load local setup if exists
if [ -f $DOTFILES/local/zsh-setup ]; then
	. $DOTFILES/local/zsh-setup
fi

# Basic SSH agent for servers
if [ "$is_server" = true ]; then
    eval $(ssh-agent)
    /usr/bin/ssh-add
fi
zstyle :omz:plugins:ssh-agent agent-forwarding on

# Disable auto-updates in agent mode
DISABLE_UPDATE_PROMPT=true
DISABLE_AUTO_UPDATE=true

# Use simple theme for better agent compatibility
ZSH_THEME="robbyrussell"  # Simple, clean theme

export LS_OPTIONS='--color=auto'
COMPLETION_WAITING_DOTS="false"  # Disable for cleaner output

# GitHub Copilot optimization settings
export COPILOT_DISABLE_TELEMETRY=true  # Optional: disable telemetry
export GITHUB_COPILOT_DISABLE_ANALYTICS=true  # Optional: disable analytics

# Load local config if exists
if [ -f $DOTFILES/local/zsh-config ]; then
	. $DOTFILES/local/zsh-config
fi

# Minimal plugin set for agent mode - only essentials
plugins=(git gitfast ssh-agent last-working-dir z)

# Add completions
fpath=($DOTFILES/zsh-completions/src $fpath)

# Load Oh My Zsh
if [ -f $ZSH/oh-my-zsh.sh ]; then
    source $ZSH/oh-my-zsh.sh
fi

export EDITOR=vim

# Set agent mode indicator
export AI_AGENT_MODE=1

# Load GitHub Copilot integration
if [ -f $DOTFILES/common/copilot-integration.zsh ]; then
    . $DOTFILES/common/copilot-integration.zsh
fi

# VS Code and AI Editor optimizations (Windsurf, GitHub Copilot, Cursor)
if [[ -n "$WINDSURF_PID" ]] || [[ -n "$VSCODE_PID" ]] || [[ "$TERM_PROGRAM" == "vscode" ]] || [[ -n "$VSCODE_INJECTION" ]]; then
    export WINDSURF_CONTEXT=1
    export VSCODE_CONTEXT=1

    # Optimize for AI features (Copilot, Windsurf Cascade, etc.)
    export TERM_PROGRAM_VERSION="${TERM_PROGRAM_VERSION:-windsurf}"

    # Enable better command completion for AI
    setopt AUTO_MENU
    setopt COMPLETE_IN_WORD
    setopt ALWAYS_TO_END
    setopt MENU_COMPLETE  # Auto-select first completion for faster AI parsing

    # Reduce completion delay for faster AI interactions
    export KEYTIMEOUT=1

    # VS Code terminal integration
    if [[ "$TERM_PROGRAM" == "vscode" ]]; then
        # Enable VS Code's shell integration for better Copilot context
        export VSCODE_SHELL_INTEGRATION=1
        
        # VS Code shell integration script - enables command detection, decorations, and navigation
        [[ "$TERM_PROGRAM" == "vscode" ]] && . "$(code --locate-shell-integration-path zsh)"
        
        # Optimize for GitHub Copilot in VS Code terminal
        export GITHUB_COPILOT_TERMINAL=1
        
        # Better command output formatting for AI parsing
        export COLUMNS=${COLUMNS:-120}  # Consistent width for AI readability
        export LINES=${LINES:-30}       # Standard height
    fi

    # Enable history for better AI context
    setopt SHARE_HISTORY
    setopt HIST_VERIFY
    setopt HIST_IGNORE_ALL_DUPS
    setopt HIST_FIND_NO_DUPS
    setopt EXTENDED_HISTORY        # Save timestamp with history
    setopt HIST_EXPIRE_DUPS_FIRST  # Expire duplicates first
    setopt HIST_SAVE_NO_DUPS       # Don't save duplicates
    
    # Enhanced history settings for AI context
    export HISTSIZE=10000
    export SAVEHIST=10000
    export HISTFILE="$HOME/.zsh_history"
    
    # Enable better command output for AI parsing
    setopt PRINT_EXIT_VALUE        # Show exit codes for failed commands
    setopt LONG_LIST_JOBS          # Show more job information
    setopt NOTIFY                  # Report status of background jobs immediately
    
    # Disable unnecessary output for cleaner AI parsing
    unsetopt BEEP                  # No beeping
    unsetopt FLOW_CONTROL          # Disable Ctrl-S/Ctrl-Q
    
    # Enable better completion for AI assistance
    setopt GLOB_COMPLETE           # Show completions for glob patterns
    setopt HASH_LIST_ALL           # Hash command locations
    setopt AUTO_LIST               # Automatically list choices on ambiguous completion

    # Windsurf PATH optimization (if windsurf CLI is available)
    if [[ -d "/Applications/Windsurf.app/Contents/Resources/app/bin" ]]; then
        export PATH="/Applications/Windsurf.app/Contents/Resources/app/bin:$PATH"
    fi
fi

# Initialize zoxide (smart directory jumping)
if command -v zoxide &> /dev/null; then
    eval "$(zoxide init zsh)"
fi

# Initialize fzf (fuzzy finder) - minimal config for agent mode
if command -v fzf &> /dev/null; then
    source <(fzf --zsh)
    export FZF_DEFAULT_OPTS="--height 40% --layout=reverse --border"
fi

# Initialize atuin (smart history) - if available
if command -v atuin &> /dev/null; then
    eval "$(atuin init zsh --disable-up-arrow)"
fi

# Simplified prompt for agent mode
PROMPT='%n@%m:%~$ '

# Disable fancy features that might interfere with agents
unsetopt PROMPT_SP
unsetopt PROMPT_CR
setopt PROMPT_PERCENT
setopt TRANSIENT_RPROMPT

# VS Code and AI Editor helper functions
if [[ -n "$WINDSURF_CONTEXT" ]] || [[ -n "$VSCODE_CONTEXT" ]]; then
    # Quick function to open current directory in Windsurf
    windsurf-here() {
        if command -v windsurf &> /dev/null; then
            windsurf "${1:-.}"
        else
            echo "Windsurf CLI not found. Install it from Windsurf ‚Üí Command Palette ‚Üí Install 'windsurf' command"
        fi
    }

    # VS Code helper function
    code-here() {
        if command -v code &> /dev/null; then
            code "${1:-.}"
        else
            echo "VS Code CLI not found. Install it from VS Code ‚Üí Command Palette ‚Üí Install 'code' command"
        fi
    }

    # GitHub Copilot helper functions
    copilot-status() {
        echo "ü§ñ GitHub Copilot Terminal Status:"
        echo "   GITHUB_COPILOT_TERMINAL: ${GITHUB_COPILOT_TERMINAL:-'not set'}"
        echo "   TERM_PROGRAM: ${TERM_PROGRAM:-'not set'}"
        echo "   VSCODE_SHELL_INTEGRATION: ${VSCODE_SHELL_INTEGRATION:-'not set'}"
        if command -v gh &> /dev/null; then
            echo "   ‚úÖ GitHub CLI available"
            if gh copilot --version &> /dev/null; then
                echo "   ‚úÖ GitHub Copilot CLI extension available"
            else
                echo "   ‚ùå GitHub Copilot CLI extension not found (run: gh extension install github/gh-copilot)"
            fi
        else
            echo "   ‚ùå GitHub CLI not found"
        fi
    }

    # Quick function to ask GitHub Copilot for help
    ask-copilot() {
        if command -v gh &> /dev/null && gh copilot --version &> /dev/null; then
            gh copilot suggest "$*"
        else
            echo "GitHub Copilot CLI not available. Install with: gh extension install github/gh-copilot"
        fi
    }

    # Function to explain a command using GitHub Copilot
    explain-cmd() {
        if command -v gh &> /dev/null && gh copilot --version &> /dev/null; then
            gh copilot explain "$*"
        else
            echo "GitHub Copilot CLI not available. Install with: gh extension install github/gh-copilot"
        fi
    }

    # Function to check AI agent detection
    ai-status() {
        echo "ü§ñ AI Terminal Optimization Status:"
        echo "   WINDSURF_PID: ${WINDSURF_PID:-'not set'}"
        echo "   VSCODE_PID: ${VSCODE_PID:-'not set'}"
        echo "   TERM_PROGRAM: ${TERM_PROGRAM:-'not set'}"
        echo "   AI_AGENT_CONTEXT: ${AI_AGENT_CONTEXT:-'not set'}"
        echo "   WINDSURF_CONTEXT: ${WINDSURF_CONTEXT:-'not set'}"
        echo "   VSCODE_CONTEXT: ${VSCODE_CONTEXT:-'not set'}"
        echo "   GITHUB_COPILOT_TERMINAL: ${GITHUB_COPILOT_TERMINAL:-'not set'}"
        echo "   Active plugins: ${plugins[@]}"
        
        if command -v windsurf &> /dev/null; then
            echo "   ‚úÖ Windsurf CLI available"
        else
            echo "   ‚ùå Windsurf CLI not found"
        fi
        
        if command -v code &> /dev/null; then
            echo "   ‚úÖ VS Code CLI available"
            if [[ "$TERM_PROGRAM" == "vscode" ]] && code --locate-shell-integration-path zsh &> /dev/null; then
                echo "   ‚úÖ VS Code shell integration available"
            else
                echo "   ‚ùå VS Code shell integration not available"
            fi
        else
            echo "   ‚ùå VS Code CLI not found"
        fi
        
        if command -v gh &> /dev/null; then
            echo "   ‚úÖ GitHub CLI available"
            if gh copilot --version &> /dev/null; then
                echo "   ‚úÖ GitHub Copilot CLI extension available"
            else
                echo "   ‚ùå GitHub Copilot CLI extension not found"
            fi
        else
            echo "   ‚ùå GitHub CLI not found"
        fi
    }
    
    # Enhanced functions for better AI interaction
    
    # Function to format command output for AI parsing
    format-for-ai() {
        if [ $# -eq 0 ]; then
            echo "Usage: format-for-ai <command>"
            echo "Formats command output for better AI assistant parsing"
            return 1
        fi
        
        echo "=== Command: $* ==="
        echo "=== Working Directory: $(pwd) ==="
        echo "=== Start Output ==="
        "$@" 2>&1
        local exit_code=$?
        echo "=== End Output ==="
        echo "=== Exit Code: $exit_code ==="
        return $exit_code
    }
    
    # Function to create structured output for AI
    ai-cmd() {
        if [ $# -eq 0 ]; then
            echo "Usage: ai-cmd <command>"
            echo "Runs a command with structured output for AI assistants"
            return 1
        fi
        
        local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
        echo "üìä AI Command Report [$timestamp]"
        echo "üîß Command: $*"
        echo "üìÅ Directory: $(pwd)"
        echo "üíª Shell: $SHELL ($ZSH_VERSION)"
        echo "üñ•Ô∏è  Terminal: $TERM_PROGRAM"
        echo ""
        echo "üìã Output:"
        echo "---"
        "$@" 2>&1
        local exit_code=$?
        echo "---"
        echo "‚úÖ Exit Code: $exit_code"
        echo "‚è∞ Completed: $(date '+%Y-%m-%d %H:%M:%S')"
        echo ""
        return $exit_code
    }
    
    # Function to get system context for AI
    ai-context() {
        echo "ü§ñ System Context for AI Assistants:"
        echo "üìç Current Directory: $(pwd)"
        echo "üë§ User: $(whoami)"
        echo "üñ•Ô∏è  Host: $(hostname)"
        echo "üêö Shell: $SHELL ($ZSH_VERSION)"
        echo "üíª OS: $(uname -s) $(uname -r)"
        echo "üì± Terminal: $TERM_PROGRAM $TERM_PROGRAM_VERSION"
        echo "üé® Theme: $ZSH_THEME"
        echo ""
        echo "üîß Available Tools:"
        command -v git &> /dev/null && echo "   ‚úÖ git ($(git --version | head -1))"
        command -v node &> /dev/null && echo "   ‚úÖ node ($(node --version))"
        command -v npm &> /dev/null && echo "   ‚úÖ npm ($(npm --version))"
        command -v yarn &> /dev/null && echo "   ‚úÖ yarn ($(yarn --version))"
        command -v pnpm &> /dev/null && echo "   ‚úÖ pnpm ($(pnpm --version))"
        command -v python3 &> /dev/null && echo "   ‚úÖ python3 ($(python3 --version))"
        command -v docker &> /dev/null && echo "   ‚úÖ docker ($(docker --version | head -1))"
        command -v kubectl &> /dev/null && echo "   ‚úÖ kubectl ($(kubectl version --client --short 2>/dev/null || echo 'installed'))"
        echo ""
        echo "üìÇ Current Directory Contents:"
        ls -la | head -10
        if [ $(ls -1 | wc -l) -gt 10 ]; then
            echo "   ... and $(($(ls -1 | wc -l) - 10)) more items"
        fi
        echo ""
    }
fi